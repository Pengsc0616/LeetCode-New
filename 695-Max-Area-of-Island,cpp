class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for(int i=0; i<grid.size(); i++) 
            for(int j=0; j<grid[0].size(); j++) 
                if(grid[i][j] == 1) 
                {
                    int ret = 0;
                    dfs(grid, i, j, ret);
                    ans = max(ans, ret);
                }
        return ans;
    }
private:
    vector<pair<int, int>> t {{1,0},{-1,0},{0,1},{0,-1}};
    void dfs(vector<vector<int>>& grid, int x, int y, int & ret) {
        grid[x][y] = 0;
        ret++;
        for(const auto & tt: t) {
            int x1 = x+tt.first;
            int y1 = y+tt.second;
            if(x1<0 || x1>=grid.size() || y1<0 || y1>=grid[0].size()) continue;
            if(grid[x1][y1] == 0) continue;
            dfs(grid, x1, y1, ret);
        }
    }
};